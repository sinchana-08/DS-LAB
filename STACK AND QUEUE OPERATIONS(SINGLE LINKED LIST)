#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->next = NULL;
    return node;
}


void push(struct Node** top, int data) {
    struct Node* newNode = newNode(data);
    newNode->next = *top;
    *top = newNode;
    printf("%d pushed onto stack\n", data);
}


int pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack underflow\n");
        return -1;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    int popped = temp->data;
    free(temp);
    return popped;
}

void enqueue(struct Node** front, struct Node** rear, int data) {
    struct Node* newNode = newNode(data);
    if (*rear == NULL) {
        *front = *rear = newNode;
    } else {
        (*rear)->next = newNode;
        *rear = newNode;
    }
    printf("%d enqueued into queue\n", data);
}

int dequeue(struct Node** front, struct Node** rear) {
    if (*front == NULL) {
        printf("Queue underflow\n");
        return -1;
    }
    struct Node* temp = *front;
    *front = (*front)->next;
    if (*front == NULL) {
        *rear = NULL;
    }
    int dequeued = temp->data;
    free(temp);
    return dequeued;
}

int main() {
    struct Node* stackTop = NULL;
    struct Node* queueFront = NULL;
    struct Node* queueRear = NULL;

    push(&stackTop, 10);
    push(&stackTop, 20);
    push(&stackTop, 30);

    printf("%d popped from stack\n", pop(&stackTop));
    printf("%d popped from stack\n", pop(&stackTop));

    enqueue(&queueFront, &queueRear, 10);
    enqueue(&queueFront, &queueRear, 20);
    enqueue(&queueFront, &queueRear, 30);

    printf("%d dequeued from queue\n", dequeue(&queueFront, &queueRear));
    printf("%d dequeued from queue\n", dequeue(&queueFront, &queueRear));

    return 0;
}
